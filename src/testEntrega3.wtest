import presentacion.*
import cancion.*
import guitarra.*
import musico.*
import album.*
import restricciones.*
import inicializate.*

describe "Entrega3" 
{	
	const cisne
	const laFamilia
	
	const eres
	const corazonAmericano
	const almaDeDiamante
	const crisantemo
	const especialLaFamilia
	const laSole
	const paraLosArboles
	const justCrisantemo
	const remixLaFamilia
	const mashupAlmaDeCrisantemo
	
	const pdepalooza
 
	fixture
	{
		cisne = objetitoMagico.cisne()
		laFamilia = objetitoMagico.laFamilia()
		eres = objetitoMagico.eres()
		corazonAmericano = objetitoMagico.corazonAmericano()
		almaDeDiamante = objetitoMagico.almaDeDiamante()
		crisantemo = objetitoMagico.crisantemo()
		
		especialLaFamilia = new Album("especialLaFamilia",[laFamilia],new Date(17,06,1992),100.000,89.000)
		laSole = new Album("laSole",[eres,corazonAmericano],new Date(04,02,2005),200.000,130.000)
		paraLosArboles = new Album("paraLosArboles",[cisne,almaDeDiamante],new Date(31,03,2003),50.000,49.000)
		justCrisantemo = new Album("justCrisantemo",[crisantemo],new Date(05,12,2007),28.000,27.500)
		
		luisAlberto.agregaAlbum(paraLosArboles)
		luisAlberto.agregaAlbum(justCrisantemo)
		
		remixLaFamilia = objetitoMagico.remixLaFamilia()
		mashupAlmaDeCrisantemo = objetitoMagico.mashupAlmaDeCrisantemo()
		
		pdepalooza = objetitoMagico.pdepalooza()
	}
	
	test "Si buscamos la cancion mas larga segun duracion, del album 'Especial La Familia' encontramos 'La Familia'" 
	{
		assert.equals(laFamilia, especialLaFamilia.compararCanciones(extencionDuracion))
	}
	
	test "Si buscamos la cancion mas larga segun duracion, del album 'La Sole' encontramos 'Corazon Americano'" 
	{
		assert.equals(corazonAmericano, laSole.compararCanciones(extencionDuracion))
	}
	
	test "Si buscamos la cancion mas larga segun extencion de la letra, del album 'La Sole' encontramos 'Eres'" 
	{
		assert.equals(eres, laSole.compararCanciones(extencionLetra))
	}
	
	test "Si remixamos la cancion 'La Familia', queda de 792 segundos" 
	{
		assert.equals(remixLaFamilia.duracion(),792)
	}
	
	test "Si remixamos la cancion 'La Familia', se le agrega 'mueve tu cuelpo baby' al principio y 'yeah oh yeah' al final" 
	{
		assert.equals(remixLaFamilia.letra(), "Mueve tu cuelpo baby Quiero brindar por mi gente sencilla, por el amor brindo por la familia yeah oh yeah")
	}
	
	test "Si hacemos un mashup de 'Alma De Diamante' y 'Crisantemo' se concatena la letra de 'Alma De Diamante' con la de 'Crisantemo' en ese orden" 
	{
		assert.equals(mashupAlmaDeCrisantemo.letra(), "Ven a mi con tu dulce luz alma de diamante. Y aunque el sol se nuble despues sos alma de diamante. Cielo o piel silencio o verdad sos alma de diamante. Por eso ven asi con la humanidad alma de diamante Tocame junto a esta pared, yo quede por aqui... cuando no hubo mas luz... quiero mirar a traves de mi piel... Crisantemo, que se abrio... encuentra el camino hacia el cielo")
	}
	
	test "Podemos agregar a Luis Alberto al recital de Pdpalooza" 
	{
		pdepalooza.agregaArtista(luisAlberto)
		assert.that(pdepalooza.vaATocar(luisAlberto))
	}
	
	test "Si intentamos agregar a Joaquin al Pdpalooza como solista, tira error" 
	{
		const joaquin = objetitoMagico.joaquin()
		joaquin.agregaAlbum(especialLaFamilia)
		
		joaquin.dejaGrupo()
		
		const excepcionEsperada = new RestriccionTieneMasDe70DeHabilidad()
  		const bloqueQueDebeExplotar = { pdepalooza.agregaArtista(joaquin) }
  		
 		 assert.throwsExceptionLike(excepcionEsperada, bloqueQueDebeExplotar)
	}

	test "Si aumentamos la habilidad de Lucia a 90 y la intentamos agregar a Pdpalooza como solista, tira error" 
	{
		const lucia = objetitoMagico.lucia()
		lucia.dejaGrupo()
		lucia.habilidad(90)
		
		const excepcionEsperada = new RestriccionTieneUnaCancion()
  		const bloqueQueDebeExplotar = { pdepalooza.agregaArtista(lucia) }
  		
 		 assert.throwsExceptionLike(excepcionEsperada, bloqueQueDebeExplotar)
	}
	
	test "Si aumentamos la habilidad de Soledad a 80 y la intentamos agregar a Pdpalooza, si se puede!" 
	{
		const soledad = objetitoMagico.soledad()
		soledad.agregaAlbum(laSole)
		soledad.habilidad(80)
		soledad.tipoDeMusico().grupo(false)
		pdepalooza.agregaArtista(soledad)
		assert.that(pdepalooza.artistas().contains(soledad))
	}
}
